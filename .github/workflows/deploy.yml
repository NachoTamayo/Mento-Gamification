name: Deploy to Vultr

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Subimos SOLO el código (sin node_modules, sin .git)
      - name: Rsync code to server (supports key or password)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          APP_DIR: ${{ secrets.APP_DIR }}
          RUN_NUMBER: ${{ github.run_number }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          DEST="${APP_DIR}/releases/${RUN_NUMBER}"
          EXCLUDES=(--exclude ".git" --exclude ".github" --exclude "node_modules" --exclude ".env" --exclude "*.env" --exclude "config_game.json")
                    if echo "$SSH_KEY" | head -n1 | grep -q "BEGIN OPENSSH PRIVATE KEY"; then
            echo "$SSH_KEY" > ~/.ssh/id_deploy
            chmod 600 ~/.ssh/id_deploy
            rsync -avz --delete "${EXCLUDES[@]}" \
              -e "ssh -i ~/.ssh/id_deploy -p ${SSH_PORT} -o StrictHostKeyChecking=no" \
              . "${SSH_USER}@${SSH_HOST}:${DEST}"
          elif [ -n "${SSH_PASSWORD:-}" ]; then
            sudo apt-get update && sudo apt-get install -y sshpass rsync
            RSYNC_RSH="sshpass -p ${SSH_PASSWORD} ssh -o StrictHostKeyChecking=no -p ${SSH_PORT}"
            rsync -avz --delete "${EXCLUDES[@]}" -e "$RSYNC_RSH" \
              . "${SSH_USER}@${SSH_HOST}:${DEST}"
          else
            echo "❌ Neither a valid SSH_KEY nor SSH_PASSWORD was provided." >&2
            exit 1
          fi

      - name: Activate release, link secrets, install & build (on server)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            APP_DIR="${{ secrets.APP_DIR }}"
            RELEASE_DIR="$APP_DIR/releases/${{ github.run_number }}"
            CURRENT_LINK="$APP_DIR/current"

            # Enlaza los secretos desde shared/ a la release
            ln -sfn "$APP_DIR/config/config_game.json" "$RELEASE_DIR/config_game.json"
            if [ -f "$APP_DIR/config/.env" ]; then
              ln -sfn "$APP_DIR/config/.env" "$RELEASE_DIR/.env"
            fi

            cd "$RELEASE_DIR"
            # Instala dependencias y construye en el servidor
            npm ci --omit=dev
            npm start

            # Apunta current a la nueva release (atómico)
            ln -sfn "$RELEASE_DIR" "$CURRENT_LINK"

      - name: Reload PM2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            APP_DIR="${{ secrets.APP_DIR }}"
            pm2 start "$APP_DIR/ecosystem.config.js" || true
            pm2 reload Gamification
            pm2 save
